"use strict";(self.webpackChunkbigowl_site=self.webpackChunkbigowl_site||[]).push([[6935],{6956:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guide/salesforce-basics/salesforce-object","title":"Salesforce Object","description":"Introduction to Salesforce for developers who prefer brevity.","source":"@site/docs/guide/salesforce-basics/salesforce-object.mdx","sourceDirName":"guide/salesforce-basics","slug":"/guide/salesforce-basics/salesforce-object","permalink":"/docs/guide/salesforce-basics/salesforce-object","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Salesforce Object","description":"Introduction to Salesforce for developers who prefer brevity.","toc_min_heading_level":2,"toc_max_heading_level":5},"sidebar":"tutorialSidebar","previous":{"title":"Get Started","permalink":"/docs/guide/salesforce-basics/intro"},"next":{"title":"Salesforce OWD and Sharing","permalink":"/docs/guide/salesforce-basics/owd-sharing"}}');var s=n(4848),l=n(8453);const o={sidebar_position:2,title:"Salesforce Object",description:"Introduction to Salesforce for developers who prefer brevity.",toc_min_heading_level:2,toc_max_heading_level:5},r=void 0,a={},d=[{value:"Key Points Regarding Objects in Salesforce",id:"key-points-regarding-objects-in-salesforce",level:2},{value:"Relationship Types",id:"relationship-types",level:3},{value:"Look-up Relationship",id:"look-up-relationship",level:4},{value:"Master-Detail Relationship",id:"master-detail-relationship",level:4},{value:"Field Dependencies",id:"field-dependencies",level:4},{value:"Field History Tracking",id:"field-history-tracking",level:4},{value:"Rollup-Summary Field",id:"rollup-summary-field",level:4},{value:"Button Links and Action",id:"button-links-and-action",level:4},{value:"Recycle Bin In Salesforce",id:"recycle-bin-in-salesforce",level:4}];function c(e){const i={admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"key-points-regarding-objects-in-salesforce",children:"Key Points Regarding Objects in Salesforce"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["When creating a new custom object, four standard fields are automatically generated:","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Name"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Owner"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Created by"})}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Last Modified by"}),","]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsx)(i.p,{children:"It is important to note that these fields cannot be deleted."})}),"\n",(0,s.jsx)(i.h3,{id:"relationship-types",children:"Relationship Types"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["The relationship must be extended to the child object, necessitating the creation of a relationships field on the child objects. Salesforce offers two fundamental types of relationships:","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"One-to-Many relationships"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.strong,{children:"Many-to-Many relationships"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.admonition,{type:"tip",children:[(0,s.jsxs)(i.p,{children:["To implement a many-to-many relationship in Salesforce, you use a special type of object called a ",(0,s.jsx)(i.code,{children:"Junction Object"}),". A junction object is a custom object with two relationships, each linking to one of the objects you want to relate. This setup allows each record of one object to be linked to multiple records of the other object, and vice versa."]}),(0,s.jsxs)(i.p,{children:["For example, consider a scenario where you want to associate ",(0,s.jsx)(i.code,{children:"Students"})," and ",(0,s.jsx)(i.code,{children:"Courses"}),". A single student can enroll in multiple courses, and each course can have multiple students. You would create a junction object called ",(0,s.jsx)(i.code,{children:"Enrollment"})," with master-detail relationships to both ",(0,s.jsx)(i.code,{children:"Student"})," and ",(0,s.jsx)(i.code,{children:"Course"}),". This enables you to track which students are enrolled in which courses."]}),(0,s.jsx)(i.p,{children:"Junction objects are essential for modeling complex data relationships and enable advanced reporting and automation based on the connections between records."})]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Relationships in Salesforce are categorized into four types:","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Lookup"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Master Details"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Self"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Hierarchical"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"look-up-relationship",children:"Look-up Relationship"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Definition:"})," A lookup relationship establishes a connection between two objects, forming a child-parent relationship."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Purpose:"})," A lookup relationship enables the retrieval of a value from one object based on the value in another object. It is particularly useful when there is a common data structure between two objects."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Implementation:"})," When defining a lookup relationship, you have the option to include a lookup field in the page layouts for the related object. Additionally, you can create a related list on the page layouts of the associated object."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"Characteristic of Lookup Relations"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Loosely Coupled Objects:"}),"\n",(0,s.jsx)(i.li,{children:"Two objects can have a relationship without any dependencies. (Deleting the parent object does not delete the child object.)"}),"\n",(0,s.jsx)(i.li,{children:"Field references can have null values."}),"\n",(0,s.jsx)(i.li,{children:"Cascade deletion is not supported. (Deleting records in one object does not affect the other object\u2019s records.)"}),"\n",(0,s.jsx)(i.li,{children:"Sharing and security are independent."}),"\n",(0,s.jsx)(i.li,{children:"Fields do not need to be displayed in the UI alias page layout."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.admonition,{type:"danger",children:[(0,s.jsx)(i.mdxAdmonitionTitle,{children:(0,s.jsx)(i.strong,{children:"tip"})}),(0,s.jsx)(i.p,{children:(0,s.jsx)(i.strong,{children:"Maximum of 40 (38 lookup + 2Master-Detail) relationships can be established per child object."})})]}),"\n",(0,s.jsx)(i.h4,{id:"master-detail-relationship",children:"Master-Detail Relationship"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"A master-detail relationship can also be employed to establish a connection between two objects."}),"\n",(0,s.jsx)(i.li,{children:"A master-detail relationship establishes a strong connection between the parent and the child."}),"\n",(0,s.jsx)(i.li,{children:"Master-detail relationships are analogous to parent-child relationships, where the master represents the parent and the detail represents the child."}),"\n",(0,s.jsxs)(i.li,{children:["Properties of Mater-Details Relationship","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"The child record inherits the security of the parent, and if the parent is deleted, all associated child records will also be deleted."}),"\n",(0,s.jsx)(i.li,{children:"The master object controls certain behaviors of the detail object. For instance, whenever a master object record is deleted, the detail object related to it is also deleted."}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Master-detail"})," relationships provide additional functionality, such as ",(0,s.jsx)(i.code,{children:"Roll-up summary"})," fields that enable the calculation of data on the parent from the child records."]}),"\n",(0,s.jsxs)(i.li,{children:["By default, records cannot be ",(0,s.jsx)(i.code,{children:"Reparented"})," in master-detail relationships.\nHowever, administrators can permit child records in ",(0,s.jsx)(i.code,{children:"master-detail"})," relationships on custom objects to be reparented to different parent records by selecting the Allow ",(0,s.jsx)(i.code,{children:"Reparenting"})," option in the ",(0,s.jsx)(i.code,{children:"master-detail"})," relationship definition."]}),"\n",(0,s.jsxs)(i.li,{children:["The ",(0,s.jsx)(i.code,{children:"Owner"})," field on the detail and Sub-detail records isn\u2019t available and is automatically set to the owner of the master record."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.admonition,{type:"danger",children:[(0,s.jsx)(i.mdxAdmonitionTitle,{children:(0,s.jsx)(i.strong,{children:"tip"})}),(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Custom objects on the detail side of a ",(0,s.jsx)(i.code,{children:"master-detail"})," relationship can't have:","\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Sharing Rules"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Manual Sharing"})}),"\n",(0,s.jsx)(i.li,{children:(0,s.jsx)(i.code,{children:"Queues"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.li,{children:"These features require the Owner field, which is not available on detail objects in a master-detail relationship."}),"\n"]})]}),"\n",(0,s.jsx)(i.h4,{id:"field-dependencies",children:"Field Dependencies"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Establish a conditional relationship that dynamically filters the values in a ",(0,s.jsx)(i.code,{children:"Pick-list"})," or ",(0,s.jsx)(i.code,{children:"multi-select Pick-list"})," based on the user\u2019s selection in a corresponding field."]}),"\n",(0,s.jsxs)(i.li,{children:["The field that determines filtering is referred to as the ",(0,s.jsx)(i.code,{children:"controlling field"}),". Standard and custom ",(0,s.jsx)(i.code,{children:"checkboxes"})," and ",(0,s.jsx)(i.code,{children:"Pick-lists"})," with a minimum of one and a maximum of 300 values can serve as controlling fields."]}),"\n",(0,s.jsxs)(i.li,{children:["The field whose values are filtered is referred to as the ",(0,s.jsx)(i.code,{children:"dependent field"}),". Custom Pick-lists and multi-select Pick-lists can be dependent fields."]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"field-history-tracking",children:"Field History Tracking"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"This feature is enabled during the creation of an Object."}),"\n",(0,s.jsx)(i.li,{children:"This page enables you to select the fields you wish to track on the Positions History related list."}),"\n",(0,s.jsx)(i.li,{children:"Whenever a user modifies any of the selected fields, the corresponding old and new field values are added to the History related list along with the date, time, nature of the change, and the user making the change."}),"\n",(0,s.jsx)(i.li,{children:"Please note that multi-select Pick-lists and large text field values are tracked as edited; their old and new field values are not recorded."}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"rollup-summary-field",children:"Rollup-Summary Field"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["You can create upto 10 ",(0,s.jsx)(i.code,{children:"roll-up summary"})," fields per object."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Roll-Up Summary"})," is a type available in the ",(0,s.jsx)(i.code,{children:"Master object"})," of a ",(0,s.jsx)(i.code,{children:"master-detail"})," relationship."]}),"\n",(0,s.jsx)(i.li,{children:"Used to perform aggregate operations on the detail records."}),"\n",(0,s.jsxs)(i.li,{children:["It is a formula like read only field that can display the ",(0,s.jsx)(i.code,{children:"Sum"}),", ",(0,s.jsx)(i.code,{children:"Min"}),", or ",(0,s.jsx)(i.code,{children:"Max"})," value or record ",(0,s.jsx)(i.code,{children:"Count"})," of a field in a related list of child records."]}),"\n",(0,s.jsx)(i.li,{children:"For limited standard relationships (Account-Opportunity and Opportunity-Product) There is an option to include all records in the roll-up or just records that meet certain criteria."}),"\n",(0,s.jsxs)(i.li,{children:["If you examine the field definition, the opportunity to account is a lookup field. However, from a business logic perspective, it functions as a ",(0,s.jsx)(i.code,{children:"master-detail"})," relationship. This means that you can create a ",(0,s.jsx)(i.code,{children:"rollup summary"})," field in the account, and if the account is deleted, the related opportunities will also be deleted."]}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"button-links-and-action",children:"Button Links and Action"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Actions"}),": There is two types of action"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Global Action: Its available on home chatter page, objects page. You cannot create a related record"}),"\n",(0,s.jsx)(i.li,{children:"Object Specific Action related to objects and you can create related records."}),"\n"]}),"\n",(0,s.jsx)(i.h4,{id:"recycle-bin-in-salesforce",children:"Recycle Bin In Salesforce"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Records stored in the Recycle Bin will remain accessible for a period of 15 days. You have the option to restore these records during this timeframe."}),"\n",(0,s.jsx)(i.li,{children:"After the 15-day period, Salesforce will automatically delete the records from the Recycle Bin."}),"\n"]})]})}function h(e={}){const{wrapper:i}={...(0,l.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>r});var t=n(6540);const s={},l=t.createContext(s);function o(e){const i=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(l.Provider,{value:i},e.children)}}}]);